# Language selection
# Note: with `language: cpp`, `cache: ccache` works
# but `cache: pip` and `python:` is ignored
language: cpp

# Currently commented out as set with environment flags
# Both clang and gcc can be tested. More is the better.
#compiler:
# - clang
# - gcc

# Environment variables
# Note: On trusty we need to build Armadillo ourselves (the system version is too old)
# Note: altering the matrix here will cause re-building of caches,
# so try to keep this concise to avoid need to update
matrix:
 include:
 # linux g{cc,++}-5 py{27,3}
 - os: linux
   python: 3
   # +boost +fftw3 +hdf5
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_FFTW3=ON -DUSE_SYSTEM_HDF5=ON" CC=gcc-5 CXX=g++-5 PYMVER=3
 - os: linux
   python: 2.7
   # +boost +fftw3 +hdf5 +siemens_to_ismrmrd +swig
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_FFTW3=ON -DUSE_SYSTEM_HDF5=ON -DBUILD_siemens_to_ismrmrd=ON -DUSE_SYSTEM_SWIG=ON" CC=gcc-5 CXX=g++-5 PYMVER=2
 - os: linux
   python: 3
   # +DEVEL +boost -hdf5 -fftw3 +siemens_to_ismrmrd
   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_FFTW3=OFF -DBUILD_siemens_to_ismrmrd=ON" CC=gcc-5 CXX=g++-5 PYMVER=3
 - os: linux
   python: 2.7
   # +DEVEL -boost -fftw3 -hdf5 -swig
   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=OFF -DUSE_SYSTEM_FFTW3=OFF -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=OFF" CC=gcc-5 CXX=g++-5 PYMVER=2
 # osx g{cc,++} py{27,36}
 - os: osx
   python: 2.7
   # +boost -hdf5 -swig
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=OFF" CC=gcc CXX=g++ PYMVER=2
 - os: osx
   # -boost -hdf5 -swig
   python: 3
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=OFF -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=OFF" CC=gcc CXX=g++ PYMVER=3
 - os: osx
   python: 2.7
   # +DEVEL +boost -hdf5 +swig
   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=ON" CC=gcc CXX=g++ PYMVER=2
 - os: osx
   python: 2.7
   # +DEVEL +boost -fftw3 -hdf5 +swig
   env: EXTRA_BUILD_FLAGS="-DDEVEL_BUILD=ON -DUSE_SYSTEM_Boost=ON -DUSE_SYSTEM_FFTW3=OFF -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=ON" CC=gcc CXX=g++ PYMVER=2
 # itk
 - os: linux
   python: 3
   # +boost +itk +fftw3 +hdf5
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_ITK=ON -DUSE_SYSTEM_FFTW3=ON -DUSE_SYSTEM_HDF5=ON" CC=gcc-5 CXX=g++-5 PYMVER=3
 - os: osx
   python: 2.7
   # +boost +itk -hdf5 +swig
   env: EXTRA_BUILD_FLAGS="-DUSE_SYSTEM_Boost=ON -DUSE_ITK=ON -DUSE_SYSTEM_HDF5=OFF -DUSE_SYSTEM_SWIG=ON" CC=gcc CXX=g++ PYMVER=2
 # docker
 - os: linux
   # +armadillo +boost +fftw3 +hdf5 +siemens_to_ismrmrd +swig
   env: DOCKER_BUILD=1
 - os: linux
   # +DEVEL +armadillo +boost +fftw3 +hdf5 +siemens_to_ismrmrd +swig
   env: DOCKER_BUILD=DEVEL

env:
 global:
  - BUILD_FLAGS="-DCMAKE_BUILD_TYPE=Release"
  # don't use too many threads - may crash
  - MAKEFLAGS="-j 2"

# Ubuntu 14.04 LTS
dist: trusty

# sudo required for docker
sudo: required
services:
 - docker

# Compilation dependencies
addons:
 apt:
  sources:
   - ubuntu-toolchain-r-test
  packages:
   - git-core
   - build-essential
   - g++-5
   - libboost-all-dev
   - libhdf5-serial-dev
   - libfftw3-dev
   - python-dev
   - python3-dev
   - python-tk
   - python3-tk
   - liblapack-dev
   - libxml2-dev
   - libarmadillo-dev
   - libgtest-dev
   - libplplot-dev
   - swig
   - ccache
   # not in whitelist
   - libxslt-dev
   - libace-dev
   # - root-system-bin

# cache C/C++/pip
cache:
  - ccache
  - pip

before_install:
 - mkdir -p ~/.local/bin
 - pushd ~/.local/bin
 # Note: use ( set -ev; ... ) to echo commands and exit immediately on failure
 # in compounds statements (note that export/cd etc won't persist).
 - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      BUILD_FLAGS="$BUILD_FLAGS -DSHARED_LIBS_ABS_PATH=ON"
      if [ $PYMVER == 2 ]; then
        PYINST=/System/Library/Frameworks/Python.framework/Versions
        PY_EXE=$PYINST/$PYMVER.7/bin/python2.7
        BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_LIBRARY=$PYINST/2.7/lib/libpython2.7.dylib"
        BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_INCLUDE_DIR=$PYINST/2.7/include/python2.7"
      else
        brew upgrade python || travis_terminate 1
        # find exact location of Python executable to pass to CMake
        PY_INST=`echo /usr/local/Cellar/python/3.*/Frameworks/Python.framework/Versions/3.*`
        PY_EXE=$PY_INST/bin/python3
        PY_LIB=$PY_INST/Python
        PY_INC=$PY_INST/Headers
        # This is not necessary if we give the actual path for the executable
        # BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_LIBRARY=$PY_LIB -DPYTHON_INCLUDE_DIR=$PY_INC"
      fi
      BUILD_FLAGS="$BUILD_FLAGS -DPYTHON_EXECUTABLE=$PY_EXE"
      ( set -ev
        # boost is already installed but 1.65 doesn't work so update
        brew upgrade boost
        # we currently need boost-python
        # brew install boost-python
        brew install ace
        brew install swig
        brew install ccache
        # brew install scipy matplotlib
        # need curl to get more recent cmake
        brew install curl
        curl -0 https://cmake.org/files/v3.8/cmake-3.8.0-Darwin-x86_64.tar.gz -o cmake.tar.gz
        tar xzf cmake.tar.gz
        mv cmake-*/CMake.app/Contents/* cmake-*
      )
    elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      PY_EXE=python$PYMVER
      if [[ -z "$DOCKER_BUILD" ]]; then
        curl -0 https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz -o cmake.tar.gz
        tar xzf cmake.tar.gz
      fi
    fi
 - |
    if [[ -z "$DOCKER_BUILD" ]]; then
      # cmake override
      pushd cmake-*/bin
      export PATH="$PWD:$PATH"
      popd
    fi
 # get pip
 - curl -0 https://bootstrap.pypa.io/get-pip.py -o get-pip.py
 - $PY_EXE get-pip.py --user
 # setuptools may be out of date on osx
 - $PY_EXE -m pip install --user -U pip setuptools wheel
 # ensure python bin dir exists (and coverage dependencies installed)
 - $PY_EXE -m pip install --user -U nose codecov coveralls
 # for counting clones, excluding ours
 - git clone https://$GITHUB_API_TOKEN@github.com/ccp-petmr-codebot/github-stats --branch $TRAVIS_REPO_SLUG
 # update with last fortnight's clones from GitHub API
 - source github-stats/setup.sh
 # count unique clones, excluding travis, and print total
 - gh_stats_count -k uniques
 - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      # pip path fix
      # show lib/site-packages path
      $PY_EXE -m pydoc pip | grep -i -A 1 file
      $PY_EXE -m pydoc codecov | grep -i -A 1 file
      # append python bin dir to path (consult output from previous lines)
      pushd $HOME/Library/Python/$PYMVER*/bin
      export PATH="$PWD:$PATH"
      popd
    fi
 - $PY_EXE --version
 - $PY_EXE -m pip --version
 - $PY_EXE -m pip freeze
 # ccache compiler override
 - ln -s "$(which ccache)" g++
 - ln -s "$(which ccache)" g++-5
 - ln -s "$(which ccache)" gcc
 - ln -s "$(which ccache)" gcc-5
 - export PATH="$PWD:$PATH"
 - popd
 # N.B.: don't put into build matrix to allow caching.
 - BUILD_FLAGS="$BUILD_FLAGS -DPYVER=$PYMVER"

install:
 - |
    if [[ -n "$DOCKER_BUILD" ]]; then
      cd docker
      export DCC="docker-compose -f $PWD/docker-compose.yml"
      [[ "$DOCKER_BUILD" == DEVEL ]] && export DCC="$DCC -f $PWD/docker-compose.devel.yml"
      ( set -ev
        # pull previous base image for its layer cache
        docker pull ccppetmr/sirf:core
        # count the docker pull (prefix `d`)
        gh_stats_count -k uniques --decrement -pd
        # rebuild base image (using above docker cache)
        # and sirf image (with travis' ccache)
        rm -rf devel/.ccache
        if [[ -n "$DOCKER_RECREATE_CCACHE" ]]; then
          mkdir devel/.ccache
          sudo rm -rf ~/.ccache
        else
          mv ~/.ccache devel/
        fi
        $DCC build --pull core
        # don't count the extra clone we're about to do
        # TODO: Do we need this? Is docker a distinct cloner from travis?
        # cloners_count_decrement
        $DCC build sirf
        # extract updated ccache
        sudo rm -rf devel/.ccache/*
        $DCC run --rm sirf /bin/bash -c 'sudo cp -a /opt/ccache/* /devel/.ccache/'
        # replace travis' ccache with the built images's
        mv devel/.ccache ~
      )
    else
      ( set -ev
        $PY_EXE -m pip install --user --only-binary=numpy,scipy,matplotlib numpy scipy matplotlib
        cmake $BUILD_FLAGS $EXTRA_BUILD_FLAGS .
        # Job may timeout (>50min) if no ccache, otherwise should be <1min:
        make
        mv INSTALL/share/gadgetron/config/gadgetron.xml.example INSTALL/share/gadgetron/config/gadgetron.xml
      )
      source $PWD/INSTALL/bin/env_ccppetmr.sh
    fi

script:
 - |
    if [[ -n "$DOCKER_BUILD" ]]; then
      # push images - but only after tests pass within the container!
      echo "$DOCKER_PWD" | docker login -u $DOCKER_USR --password-stdin
      $DCC run --rm sirf /bin/bash --login -c '/devel/test.sh 1' \
        && $DCC push \
        && if [[ -n "$TRAVIS_TAG" && "$DOCKER_BUILD" != DEVEL ]]; then ( set -ev
             # tag release
             docker tag ccppetmr/sirf:latest ccppetmr/sirf:"$TRAVIS_TAG"
             docker tag ccppetmr/sirf:latest ccppetmr/sirf:release
             docker push ccppetmr/sirf:"$TRAVIS_TAG"
             docker push ccppetmr/sirf:release
           ); fi
    else
      ./INSTALL/bin/gadgetron >& gadgetron.log&
      # print for debugging
      cat builds/SIRF/build/CMakeCache.txt
      ctest -VV
      # print for debugging
      cat builds/SIRF/build/Testing/Temporary/LastTest.log
      # may exceed 4MB travis log limit
      cat gadgetron.log
    fi

# post to slack.com
notifications:
 slack:
  rooms:
   - secure: "ZSBIUaNNQ7925etI0EtB+S5DnU++htNPUQYr78Lv8chhpx/2wTjFCxc7nVLhUHuqAblTnL2UkJj/f6rPecd+StgUBZcZboEIxYxju53xvi3pW7IdkzSNPYcFMQvyRpk562d9VUzK+iaOxdQaXyqEttCHTJNP4P2AcSILuRZPiNVk673lFXq8s8Hkhui64WzGkA5rPh1H6DObDoynME4MyuBRjygslCKBn5DiejTq2xhKdyIe6q+Nd1Vd456shcUNCgnbsrpq6Ik1tIUDBs+lCYvBN/ST6HfisL1cUNOqM0rVhNJBVNWVMOpGwkoKMfN5ZFl90HXiB9MGI7WDU7tzvdvFN/nsjfXBPAEYIvdHx6RkIIn2GeoAO9S9UZiyUNThjxs9jg7TJdLPaow1PIbLRrNi4WXpE4PYYzc7krGsZgIlhBx4SfMOXT7PLUevGOumRVetyddbVRIhJ6v92h29joQuwSKim2bVsOyznbTyLqn0ysIkqTD7aLov09Sh7Ni8VzVN/sWtlinzk1jIzpL4NxEzWKHL58q2lddyE6kD7FZCxw7dIdIMy3V84zt9oRzGNXETgzi5ClHXkHyYjoOGBbySG4v3Letlai0m0vhFvPGHhk8KZzyR9OUPJ6XZcmIdr5QJb4Nlc1b8r4INn7BNOiRAo4GSk1NJKze1gjdV6Ig="
  on_success: change
  on_failure: always
